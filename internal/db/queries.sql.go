// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUserProcesses = `-- name: CountUserProcesses :one

SELECT COUNT(*) FROM process_info WHERE user_id = $1
`

// ============================================
// Statistics and Analytics
// ============================================
func (q *Queries) CountUserProcesses(ctx context.Context, userID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countUserProcesses, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserQueries = `-- name: CountUserQueries :one
SELECT COUNT(*) FROM process_queries WHERE user_id = $1
`

func (q *Queries) CountUserQueries(ctx context.Context, userID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countUserQueries, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserSnapshots = `-- name: CountUserSnapshots :one
SELECT COUNT(*) FROM process_snapshots WHERE user_id = $1
`

func (q *Queries) CountUserSnapshots(ctx context.Context, userID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countUserSnapshots, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProcessInfo = `-- name: CreateProcessInfo :one

INSERT INTO process_info (
    snapshot_id,
    user_id,
    process_id,
    parent_process_id,
    process_name,
    thread_count,
    handle_count,
    base_priority,
    create_time,
    user_time,
    kernel_time,
    working_set_size,
    peak_working_set_size,
    virtual_size,
    peak_virtual_size,
    read_operation_count,
    write_operation_count,
    other_operation_count,
    read_transfer_count,
    write_transfer_count,
    other_transfer_count,
    page_fault_count,
    current_process_address,
    next_process_eprocess_address,
    next_process_name,
    next_process_id,
    next_id,
    previous_process_eprocess_address,
    previous_process_name,
    previous_process_id,
    previous_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
    $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31
) RETURNING id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at
`

type CreateProcessInfoParams struct {
	SnapshotID                     int64       `json:"snapshot_id"`
	UserID                         pgtype.Int8 `json:"user_id"`
	ProcessID                      int64       `json:"process_id"`
	ParentProcessID                int64       `json:"parent_process_id"`
	ProcessName                    string      `json:"process_name"`
	ThreadCount                    int32       `json:"thread_count"`
	HandleCount                    int32       `json:"handle_count"`
	BasePriority                   int32       `json:"base_priority"`
	CreateTime                     string      `json:"create_time"`
	UserTime                       int32       `json:"user_time"`
	KernelTime                     int32       `json:"kernel_time"`
	WorkingSetSize                 int64       `json:"working_set_size"`
	PeakWorkingSetSize             int64       `json:"peak_working_set_size"`
	VirtualSize                    int64       `json:"virtual_size"`
	PeakVirtualSize                int64       `json:"peak_virtual_size"`
	ReadOperationCount             int64       `json:"read_operation_count"`
	WriteOperationCount            int64       `json:"write_operation_count"`
	OtherOperationCount            int64       `json:"other_operation_count"`
	ReadTransferCount              int64       `json:"read_transfer_count"`
	WriteTransferCount             int64       `json:"write_transfer_count"`
	OtherTransferCount             int64       `json:"other_transfer_count"`
	PageFaultCount                 int64       `json:"page_fault_count"`
	CurrentProcessAddress          string      `json:"current_process_address"`
	NextProcessEprocessAddress     pgtype.Text `json:"next_process_eprocess_address"`
	NextProcessName                pgtype.Text `json:"next_process_name"`
	NextProcessID                  pgtype.Int8 `json:"next_process_id"`
	NextID                         pgtype.Int8 `json:"next_id"`
	PreviousProcessEprocessAddress pgtype.Text `json:"previous_process_eprocess_address"`
	PreviousProcessName            pgtype.Text `json:"previous_process_name"`
	PreviousProcessID              pgtype.Int8 `json:"previous_process_id"`
	PreviousID                     pgtype.Int8 `json:"previous_id"`
}

// ============================================
// Process Info Queries
// ============================================
func (q *Queries) CreateProcessInfo(ctx context.Context, arg CreateProcessInfoParams) (ProcessInfo, error) {
	row := q.db.QueryRow(ctx, createProcessInfo,
		arg.SnapshotID,
		arg.UserID,
		arg.ProcessID,
		arg.ParentProcessID,
		arg.ProcessName,
		arg.ThreadCount,
		arg.HandleCount,
		arg.BasePriority,
		arg.CreateTime,
		arg.UserTime,
		arg.KernelTime,
		arg.WorkingSetSize,
		arg.PeakWorkingSetSize,
		arg.VirtualSize,
		arg.PeakVirtualSize,
		arg.ReadOperationCount,
		arg.WriteOperationCount,
		arg.OtherOperationCount,
		arg.ReadTransferCount,
		arg.WriteTransferCount,
		arg.OtherTransferCount,
		arg.PageFaultCount,
		arg.CurrentProcessAddress,
		arg.NextProcessEprocessAddress,
		arg.NextProcessName,
		arg.NextProcessID,
		arg.NextID,
		arg.PreviousProcessEprocessAddress,
		arg.PreviousProcessName,
		arg.PreviousProcessID,
		arg.PreviousID,
	)
	var i ProcessInfo
	err := row.Scan(
		&i.ID,
		&i.SnapshotID,
		&i.UserID,
		&i.ProcessID,
		&i.ParentProcessID,
		&i.ProcessName,
		&i.ThreadCount,
		&i.HandleCount,
		&i.BasePriority,
		&i.CreateTime,
		&i.UserTime,
		&i.KernelTime,
		&i.WorkingSetSize,
		&i.PeakWorkingSetSize,
		&i.VirtualSize,
		&i.PeakVirtualSize,
		&i.ReadOperationCount,
		&i.WriteOperationCount,
		&i.OtherOperationCount,
		&i.ReadTransferCount,
		&i.WriteTransferCount,
		&i.OtherTransferCount,
		&i.PageFaultCount,
		&i.CurrentProcessAddress,
		&i.NextProcessEprocessAddress,
		&i.NextProcessName,
		&i.NextProcessID,
		&i.NextID,
		&i.PreviousProcessEprocessAddress,
		&i.PreviousProcessName,
		&i.PreviousProcessID,
		&i.PreviousID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProcessQuery = `-- name: CreateProcessQuery :one

INSERT INTO process_queries (
    snapshot_id,
    user_id,
    webhook_url,
    requested_pid,
    process_info_id,
    success,
    error_message
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, snapshot_id, user_id, webhook_url, requested_pid, process_info_id, success, error_message, created_at
`

type CreateProcessQueryParams struct {
	SnapshotID    int64       `json:"snapshot_id"`
	UserID        pgtype.Int8 `json:"user_id"`
	WebhookUrl    string      `json:"webhook_url"`
	RequestedPid  int32       `json:"requested_pid"`
	ProcessInfoID pgtype.Int8 `json:"process_info_id"`
	Success       bool        `json:"success"`
	ErrorMessage  pgtype.Text `json:"error_message"`
}

// ============================================
// Process Queries (Query by PID history)
// ============================================
func (q *Queries) CreateProcessQuery(ctx context.Context, arg CreateProcessQueryParams) (ProcessQuery, error) {
	row := q.db.QueryRow(ctx, createProcessQuery,
		arg.SnapshotID,
		arg.UserID,
		arg.WebhookUrl,
		arg.RequestedPid,
		arg.ProcessInfoID,
		arg.Success,
		arg.ErrorMessage,
	)
	var i ProcessQuery
	err := row.Scan(
		&i.ID,
		&i.SnapshotID,
		&i.UserID,
		&i.WebhookUrl,
		&i.RequestedPid,
		&i.ProcessInfoID,
		&i.Success,
		&i.ErrorMessage,
		&i.CreatedAt,
	)
	return i, err
}

const createProcessSnapshot = `-- name: CreateProcessSnapshot :one

INSERT INTO process_snapshots (
    user_id,
    webhook_url,
    snapshot_type,
    process_count,
    success,
    error_message
) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, webhook_url, snapshot_type, process_count, success, error_message, created_at, updated_at
`

type CreateProcessSnapshotParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	WebhookUrl   string      `json:"webhook_url"`
	SnapshotType string      `json:"snapshot_type"`
	ProcessCount int32       `json:"process_count"`
	Success      bool        `json:"success"`
	ErrorMessage pgtype.Text `json:"error_message"`
}

// ============================================
// Process Snapshots Queries
// ============================================
func (q *Queries) CreateProcessSnapshot(ctx context.Context, arg CreateProcessSnapshotParams) (ProcessSnapshot, error) {
	row := q.db.QueryRow(ctx, createProcessSnapshot,
		arg.UserID,
		arg.WebhookUrl,
		arg.SnapshotType,
		arg.ProcessCount,
		arg.Success,
		arg.ErrorMessage,
	)
	var i ProcessSnapshot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebhookUrl,
		&i.SnapshotType,
		&i.ProcessCount,
		&i.Success,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password) VALUES ($1, $2) RETURNING id, name, password, created_at, updated_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProcessInfo = `-- name: DeleteProcessInfo :exec
DELETE FROM process_info WHERE id = $1
`

func (q *Queries) DeleteProcessInfo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProcessInfo, id)
	return err
}

const deleteProcessSnapshot = `-- name: DeleteProcessSnapshot :exec
DELETE FROM process_snapshots WHERE id = $1
`

func (q *Queries) DeleteProcessSnapshot(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProcessSnapshot, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getMostQueriedProcesses = `-- name: GetMostQueriedProcesses :many
SELECT 
    requested_pid,
    COUNT(*) as query_count
FROM process_queries
WHERE user_id = $1 OR user_id IS NULL
GROUP BY requested_pid
ORDER BY query_count DESC
LIMIT $2
`

type GetMostQueriedProcessesParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
}

type GetMostQueriedProcessesRow struct {
	RequestedPid int32 `json:"requested_pid"`
	QueryCount   int64 `json:"query_count"`
}

func (q *Queries) GetMostQueriedProcesses(ctx context.Context, arg GetMostQueriedProcessesParams) ([]GetMostQueriedProcessesRow, error) {
	rows, err := q.db.Query(ctx, getMostQueriedProcesses, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMostQueriedProcessesRow
	for rows.Next() {
		var i GetMostQueriedProcessesRow
		if err := rows.Scan(&i.RequestedPid, &i.QueryCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessInfo = `-- name: GetProcessInfo :one
SELECT id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at FROM process_info WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProcessInfo(ctx context.Context, id int64) (ProcessInfo, error) {
	row := q.db.QueryRow(ctx, getProcessInfo, id)
	var i ProcessInfo
	err := row.Scan(
		&i.ID,
		&i.SnapshotID,
		&i.UserID,
		&i.ProcessID,
		&i.ParentProcessID,
		&i.ProcessName,
		&i.ThreadCount,
		&i.HandleCount,
		&i.BasePriority,
		&i.CreateTime,
		&i.UserTime,
		&i.KernelTime,
		&i.WorkingSetSize,
		&i.PeakWorkingSetSize,
		&i.VirtualSize,
		&i.PeakVirtualSize,
		&i.ReadOperationCount,
		&i.WriteOperationCount,
		&i.OtherOperationCount,
		&i.ReadTransferCount,
		&i.WriteTransferCount,
		&i.OtherTransferCount,
		&i.PageFaultCount,
		&i.CurrentProcessAddress,
		&i.NextProcessEprocessAddress,
		&i.NextProcessName,
		&i.NextProcessID,
		&i.NextID,
		&i.PreviousProcessEprocessAddress,
		&i.PreviousProcessName,
		&i.PreviousProcessID,
		&i.PreviousID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProcessInfoBySnapshotAndPID = `-- name: GetProcessInfoBySnapshotAndPID :one
SELECT id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at FROM process_info 
WHERE snapshot_id = $1 AND process_id = $2
LIMIT 1
`

type GetProcessInfoBySnapshotAndPIDParams struct {
	SnapshotID int64 `json:"snapshot_id"`
	ProcessID  int64 `json:"process_id"`
}

func (q *Queries) GetProcessInfoBySnapshotAndPID(ctx context.Context, arg GetProcessInfoBySnapshotAndPIDParams) (ProcessInfo, error) {
	row := q.db.QueryRow(ctx, getProcessInfoBySnapshotAndPID, arg.SnapshotID, arg.ProcessID)
	var i ProcessInfo
	err := row.Scan(
		&i.ID,
		&i.SnapshotID,
		&i.UserID,
		&i.ProcessID,
		&i.ParentProcessID,
		&i.ProcessName,
		&i.ThreadCount,
		&i.HandleCount,
		&i.BasePriority,
		&i.CreateTime,
		&i.UserTime,
		&i.KernelTime,
		&i.WorkingSetSize,
		&i.PeakWorkingSetSize,
		&i.VirtualSize,
		&i.PeakVirtualSize,
		&i.ReadOperationCount,
		&i.WriteOperationCount,
		&i.OtherOperationCount,
		&i.ReadTransferCount,
		&i.WriteTransferCount,
		&i.OtherTransferCount,
		&i.PageFaultCount,
		&i.CurrentProcessAddress,
		&i.NextProcessEprocessAddress,
		&i.NextProcessName,
		&i.NextProcessID,
		&i.NextID,
		&i.PreviousProcessEprocessAddress,
		&i.PreviousProcessName,
		&i.PreviousProcessID,
		&i.PreviousID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProcessInfosByProcessID = `-- name: GetProcessInfosByProcessID :many
SELECT id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at FROM process_info 
WHERE (user_id = $1 OR user_id IS NULL) AND process_id = $2
ORDER BY created_at DESC
`

type GetProcessInfosByProcessIDParams struct {
	UserID    pgtype.Int8 `json:"user_id"`
	ProcessID int64       `json:"process_id"`
}

func (q *Queries) GetProcessInfosByProcessID(ctx context.Context, arg GetProcessInfosByProcessIDParams) ([]ProcessInfo, error) {
	rows, err := q.db.Query(ctx, getProcessInfosByProcessID, arg.UserID, arg.ProcessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessInfo
	for rows.Next() {
		var i ProcessInfo
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.ProcessID,
			&i.ParentProcessID,
			&i.ProcessName,
			&i.ThreadCount,
			&i.HandleCount,
			&i.BasePriority,
			&i.CreateTime,
			&i.UserTime,
			&i.KernelTime,
			&i.WorkingSetSize,
			&i.PeakWorkingSetSize,
			&i.VirtualSize,
			&i.PeakVirtualSize,
			&i.ReadOperationCount,
			&i.WriteOperationCount,
			&i.OtherOperationCount,
			&i.ReadTransferCount,
			&i.WriteTransferCount,
			&i.OtherTransferCount,
			&i.PageFaultCount,
			&i.CurrentProcessAddress,
			&i.NextProcessEprocessAddress,
			&i.NextProcessName,
			&i.NextProcessID,
			&i.NextID,
			&i.PreviousProcessEprocessAddress,
			&i.PreviousProcessName,
			&i.PreviousProcessID,
			&i.PreviousID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessInfosBySnapshot = `-- name: GetProcessInfosBySnapshot :many
SELECT id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at FROM process_info 
WHERE snapshot_id = $1
ORDER BY process_id ASC
`

func (q *Queries) GetProcessInfosBySnapshot(ctx context.Context, snapshotID int64) ([]ProcessInfo, error) {
	rows, err := q.db.Query(ctx, getProcessInfosBySnapshot, snapshotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessInfo
	for rows.Next() {
		var i ProcessInfo
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.ProcessID,
			&i.ParentProcessID,
			&i.ProcessName,
			&i.ThreadCount,
			&i.HandleCount,
			&i.BasePriority,
			&i.CreateTime,
			&i.UserTime,
			&i.KernelTime,
			&i.WorkingSetSize,
			&i.PeakWorkingSetSize,
			&i.VirtualSize,
			&i.PeakVirtualSize,
			&i.ReadOperationCount,
			&i.WriteOperationCount,
			&i.OtherOperationCount,
			&i.ReadTransferCount,
			&i.WriteTransferCount,
			&i.OtherTransferCount,
			&i.PageFaultCount,
			&i.CurrentProcessAddress,
			&i.NextProcessEprocessAddress,
			&i.NextProcessName,
			&i.NextProcessID,
			&i.NextID,
			&i.PreviousProcessEprocessAddress,
			&i.PreviousProcessName,
			&i.PreviousProcessID,
			&i.PreviousID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessInfosByUser = `-- name: GetProcessInfosByUser :many
SELECT id, snapshot_id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count, base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size, virtual_size, peak_virtual_size, read_operation_count, write_operation_count, other_operation_count, read_transfer_count, write_transfer_count, other_transfer_count, page_fault_count, current_process_address, next_process_eprocess_address, next_process_name, next_process_id, next_id, previous_process_eprocess_address, previous_process_name, previous_process_id, previous_id, created_at, updated_at FROM process_info 
WHERE user_id = $1 OR user_id IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetProcessInfosByUser(ctx context.Context, userID pgtype.Int8) ([]ProcessInfo, error) {
	rows, err := q.db.Query(ctx, getProcessInfosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessInfo
	for rows.Next() {
		var i ProcessInfo
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.ProcessID,
			&i.ParentProcessID,
			&i.ProcessName,
			&i.ThreadCount,
			&i.HandleCount,
			&i.BasePriority,
			&i.CreateTime,
			&i.UserTime,
			&i.KernelTime,
			&i.WorkingSetSize,
			&i.PeakWorkingSetSize,
			&i.VirtualSize,
			&i.PeakVirtualSize,
			&i.ReadOperationCount,
			&i.WriteOperationCount,
			&i.OtherOperationCount,
			&i.ReadTransferCount,
			&i.WriteTransferCount,
			&i.OtherTransferCount,
			&i.PageFaultCount,
			&i.CurrentProcessAddress,
			&i.NextProcessEprocessAddress,
			&i.NextProcessName,
			&i.NextProcessID,
			&i.NextID,
			&i.PreviousProcessEprocessAddress,
			&i.PreviousProcessName,
			&i.PreviousProcessID,
			&i.PreviousID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessQueriesByPID = `-- name: GetProcessQueriesByPID :many
SELECT id, snapshot_id, user_id, webhook_url, requested_pid, process_info_id, success, error_message, created_at FROM process_queries 
WHERE (user_id = $1 OR user_id IS NULL) AND requested_pid = $2
ORDER BY created_at DESC
`

type GetProcessQueriesByPIDParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	RequestedPid int32       `json:"requested_pid"`
}

func (q *Queries) GetProcessQueriesByPID(ctx context.Context, arg GetProcessQueriesByPIDParams) ([]ProcessQuery, error) {
	rows, err := q.db.Query(ctx, getProcessQueriesByPID, arg.UserID, arg.RequestedPid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessQuery
	for rows.Next() {
		var i ProcessQuery
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.WebhookUrl,
			&i.RequestedPid,
			&i.ProcessInfoID,
			&i.Success,
			&i.ErrorMessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessQueriesBySnapshot = `-- name: GetProcessQueriesBySnapshot :many
SELECT id, snapshot_id, user_id, webhook_url, requested_pid, process_info_id, success, error_message, created_at FROM process_queries 
WHERE snapshot_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetProcessQueriesBySnapshot(ctx context.Context, snapshotID int64) ([]ProcessQuery, error) {
	rows, err := q.db.Query(ctx, getProcessQueriesBySnapshot, snapshotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessQuery
	for rows.Next() {
		var i ProcessQuery
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.WebhookUrl,
			&i.RequestedPid,
			&i.ProcessInfoID,
			&i.Success,
			&i.ErrorMessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessQueriesByUser = `-- name: GetProcessQueriesByUser :many
SELECT id, snapshot_id, user_id, webhook_url, requested_pid, process_info_id, success, error_message, created_at FROM process_queries 
WHERE user_id = $1 OR user_id IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetProcessQueriesByUser(ctx context.Context, userID pgtype.Int8) ([]ProcessQuery, error) {
	rows, err := q.db.Query(ctx, getProcessQueriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessQuery
	for rows.Next() {
		var i ProcessQuery
		if err := rows.Scan(
			&i.ID,
			&i.SnapshotID,
			&i.UserID,
			&i.WebhookUrl,
			&i.RequestedPid,
			&i.ProcessInfoID,
			&i.Success,
			&i.ErrorMessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessQuery = `-- name: GetProcessQuery :one
SELECT id, snapshot_id, user_id, webhook_url, requested_pid, process_info_id, success, error_message, created_at FROM process_queries WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProcessQuery(ctx context.Context, id int64) (ProcessQuery, error) {
	row := q.db.QueryRow(ctx, getProcessQuery, id)
	var i ProcessQuery
	err := row.Scan(
		&i.ID,
		&i.SnapshotID,
		&i.UserID,
		&i.WebhookUrl,
		&i.RequestedPid,
		&i.ProcessInfoID,
		&i.Success,
		&i.ErrorMessage,
		&i.CreatedAt,
	)
	return i, err
}

const getProcessSnapshot = `-- name: GetProcessSnapshot :one
SELECT id, user_id, webhook_url, snapshot_type, process_count, success, error_message, created_at, updated_at FROM process_snapshots WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProcessSnapshot(ctx context.Context, id int64) (ProcessSnapshot, error) {
	row := q.db.QueryRow(ctx, getProcessSnapshot, id)
	var i ProcessSnapshot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebhookUrl,
		&i.SnapshotType,
		&i.ProcessCount,
		&i.Success,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProcessSnapshotsByType = `-- name: GetProcessSnapshotsByType :many
SELECT id, user_id, webhook_url, snapshot_type, process_count, success, error_message, created_at, updated_at FROM process_snapshots 
WHERE (user_id = $1 OR user_id IS NULL) AND snapshot_type = $2
ORDER BY created_at DESC
`

type GetProcessSnapshotsByTypeParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	SnapshotType string      `json:"snapshot_type"`
}

func (q *Queries) GetProcessSnapshotsByType(ctx context.Context, arg GetProcessSnapshotsByTypeParams) ([]ProcessSnapshot, error) {
	rows, err := q.db.Query(ctx, getProcessSnapshotsByType, arg.UserID, arg.SnapshotType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessSnapshot
	for rows.Next() {
		var i ProcessSnapshot
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WebhookUrl,
			&i.SnapshotType,
			&i.ProcessCount,
			&i.Success,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessSnapshotsByUser = `-- name: GetProcessSnapshotsByUser :many
SELECT id, user_id, webhook_url, snapshot_type, process_count, success, error_message, created_at, updated_at FROM process_snapshots 
WHERE user_id = $1 OR user_id IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetProcessSnapshotsByUser(ctx context.Context, userID pgtype.Int8) ([]ProcessSnapshot, error) {
	rows, err := q.db.Query(ctx, getProcessSnapshotsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessSnapshot
	for rows.Next() {
		var i ProcessSnapshot
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WebhookUrl,
			&i.SnapshotType,
			&i.ProcessCount,
			&i.Success,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnapshotStatistics = `-- name: GetSnapshotStatistics :one
SELECT 
    COUNT(DISTINCT snapshot_id) as total_snapshots,
    COUNT(*) as total_processes,
    COALESCE(AVG(process_count), 0) as avg_processes_per_snapshot
FROM process_info pi
LEFT JOIN process_snapshots ps ON ps.id = pi.snapshot_id
WHERE pi.user_id = $1 OR pi.user_id IS NULL
`

type GetSnapshotStatisticsRow struct {
	TotalSnapshots          int64       `json:"total_snapshots"`
	TotalProcesses          int64       `json:"total_processes"`
	AvgProcessesPerSnapshot interface{} `json:"avg_processes_per_snapshot"`
}

func (q *Queries) GetSnapshotStatistics(ctx context.Context, userID pgtype.Int8) (GetSnapshotStatisticsRow, error) {
	row := q.db.QueryRow(ctx, getSnapshotStatistics, userID)
	var i GetSnapshotStatisticsRow
	err := row.Scan(&i.TotalSnapshots, &i.TotalProcesses, &i.AvgProcessesPerSnapshot)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, password, created_at, updated_at FROM users WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, password, created_at, updated_at FROM users ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProcessSnapshotCount = `-- name: UpdateProcessSnapshotCount :exec
UPDATE process_snapshots 
SET process_count = $2, updated_at = NOW() 
WHERE id = $1
`

type UpdateProcessSnapshotCountParams struct {
	ID           int64 `json:"id"`
	ProcessCount int32 `json:"process_count"`
}

func (q *Queries) UpdateProcessSnapshotCount(ctx context.Context, arg UpdateProcessSnapshotCountParams) error {
	_, err := q.db.Exec(ctx, updateProcessSnapshotCount, arg.ID, arg.ProcessCount)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $1, password = $2, updated_at = NOW() WHERE id = $3 RETURNING id, name, password, created_at, updated_at
`

type UpdateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Name, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
