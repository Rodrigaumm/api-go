// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProcessInfo = `-- name: CreateProcessInfo :one

INSERT INTO process_info (
    user_id, process_id, parent_process_id, process_name, thread_count, handle_count,
    base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size,
    virtual_size, peak_virtual_size, pagefile_usage, peak_pagefile_usage, page_fault_count,
    read_operation_count, write_operation_count, other_operation_count, read_transfer_count,
    write_transfer_count, other_transfer_count, current_process_address, next_process_address,
    previous_process_address
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26
)
RETURNING id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count,
    base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size,
    virtual_size, peak_virtual_size, pagefile_usage, peak_pagefile_usage, page_fault_count,
    read_operation_count, write_operation_count, other_operation_count, read_transfer_count,
    write_transfer_count, other_transfer_count, current_process_address, next_process_address,
    previous_process_address, created_at, updated_at
`

type CreateProcessInfoParams struct {
	UserID                 int64            `json:"user_id"`
	ProcessID              int64            `json:"process_id"`
	ParentProcessID        int64            `json:"parent_process_id"`
	ProcessName            string           `json:"process_name"`
	ThreadCount            int64            `json:"thread_count"`
	HandleCount            int64            `json:"handle_count"`
	BasePriority           int32            `json:"base_priority"`
	CreateTime             pgtype.Timestamp `json:"create_time"`
	UserTime               int64            `json:"user_time"`
	KernelTime             int64            `json:"kernel_time"`
	WorkingSetSize         int64            `json:"working_set_size"`
	PeakWorkingSetSize     int64            `json:"peak_working_set_size"`
	VirtualSize            int64            `json:"virtual_size"`
	PeakVirtualSize        int64            `json:"peak_virtual_size"`
	PagefileUsage          int64            `json:"pagefile_usage"`
	PeakPagefileUsage      int64            `json:"peak_pagefile_usage"`
	PageFaultCount         int64            `json:"page_fault_count"`
	ReadOperationCount     int64            `json:"read_operation_count"`
	WriteOperationCount    int64            `json:"write_operation_count"`
	OtherOperationCount    int64            `json:"other_operation_count"`
	ReadTransferCount      int64            `json:"read_transfer_count"`
	WriteTransferCount     int64            `json:"write_transfer_count"`
	OtherTransferCount     int64            `json:"other_transfer_count"`
	CurrentProcessAddress  pgtype.Text      `json:"current_process_address"`
	NextProcessAddress     pgtype.Text      `json:"next_process_address"`
	PreviousProcessAddress pgtype.Text      `json:"previous_process_address"`
}

// Process Info Queries
func (q *Queries) CreateProcessInfo(ctx context.Context, arg CreateProcessInfoParams) (ProcessInfo, error) {
	row := q.db.QueryRow(ctx, createProcessInfo,
		arg.UserID,
		arg.ProcessID,
		arg.ParentProcessID,
		arg.ProcessName,
		arg.ThreadCount,
		arg.HandleCount,
		arg.BasePriority,
		arg.CreateTime,
		arg.UserTime,
		arg.KernelTime,
		arg.WorkingSetSize,
		arg.PeakWorkingSetSize,
		arg.VirtualSize,
		arg.PeakVirtualSize,
		arg.PagefileUsage,
		arg.PeakPagefileUsage,
		arg.PageFaultCount,
		arg.ReadOperationCount,
		arg.WriteOperationCount,
		arg.OtherOperationCount,
		arg.ReadTransferCount,
		arg.WriteTransferCount,
		arg.OtherTransferCount,
		arg.CurrentProcessAddress,
		arg.NextProcessAddress,
		arg.PreviousProcessAddress,
	)
	var i ProcessInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProcessID,
		&i.ParentProcessID,
		&i.ProcessName,
		&i.ThreadCount,
		&i.HandleCount,
		&i.BasePriority,
		&i.CreateTime,
		&i.UserTime,
		&i.KernelTime,
		&i.WorkingSetSize,
		&i.PeakWorkingSetSize,
		&i.VirtualSize,
		&i.PeakVirtualSize,
		&i.PagefileUsage,
		&i.PeakPagefileUsage,
		&i.PageFaultCount,
		&i.ReadOperationCount,
		&i.WriteOperationCount,
		&i.OtherOperationCount,
		&i.ReadTransferCount,
		&i.WriteTransferCount,
		&i.OtherTransferCount,
		&i.CurrentProcessAddress,
		&i.NextProcessAddress,
		&i.PreviousProcessAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, password
) VALUES (
  $1, $2, $3
)
RETURNING id, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProcessInfo = `-- name: DeleteProcessInfo :exec
DELETE FROM process_info
WHERE id = $1 AND user_id = $2
`

type DeleteProcessInfoParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteProcessInfo(ctx context.Context, arg DeleteProcessInfoParams) error {
	_, err := q.db.Exec(ctx, deleteProcessInfo, arg.ID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getProcessInfo = `-- name: GetProcessInfo :one
SELECT id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count,
    base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size,
    virtual_size, peak_virtual_size, pagefile_usage, peak_pagefile_usage, page_fault_count,
    read_operation_count, write_operation_count, other_operation_count, read_transfer_count,
    write_transfer_count, other_transfer_count, current_process_address, next_process_address,
    previous_process_address, created_at, updated_at
FROM process_info
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetProcessInfoParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetProcessInfo(ctx context.Context, arg GetProcessInfoParams) (ProcessInfo, error) {
	row := q.db.QueryRow(ctx, getProcessInfo, arg.ID, arg.UserID)
	var i ProcessInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProcessID,
		&i.ParentProcessID,
		&i.ProcessName,
		&i.ThreadCount,
		&i.HandleCount,
		&i.BasePriority,
		&i.CreateTime,
		&i.UserTime,
		&i.KernelTime,
		&i.WorkingSetSize,
		&i.PeakWorkingSetSize,
		&i.VirtualSize,
		&i.PeakVirtualSize,
		&i.PagefileUsage,
		&i.PeakPagefileUsage,
		&i.PageFaultCount,
		&i.ReadOperationCount,
		&i.WriteOperationCount,
		&i.OtherOperationCount,
		&i.ReadTransferCount,
		&i.WriteTransferCount,
		&i.OtherTransferCount,
		&i.CurrentProcessAddress,
		&i.NextProcessAddress,
		&i.PreviousProcessAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProcessInfosByProcessId = `-- name: GetProcessInfosByProcessId :many
SELECT id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count,
    base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size,
    virtual_size, peak_virtual_size, pagefile_usage, peak_pagefile_usage, page_fault_count,
    read_operation_count, write_operation_count, other_operation_count, read_transfer_count,
    write_transfer_count, other_transfer_count, current_process_address, next_process_address,
    previous_process_address, created_at, updated_at
FROM process_info
WHERE user_id = $1 AND process_id = $2
ORDER BY created_at DESC
`

type GetProcessInfosByProcessIdParams struct {
	UserID    int64 `json:"user_id"`
	ProcessID int64 `json:"process_id"`
}

func (q *Queries) GetProcessInfosByProcessId(ctx context.Context, arg GetProcessInfosByProcessIdParams) ([]ProcessInfo, error) {
	rows, err := q.db.Query(ctx, getProcessInfosByProcessId, arg.UserID, arg.ProcessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessInfo
	for rows.Next() {
		var i ProcessInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProcessID,
			&i.ParentProcessID,
			&i.ProcessName,
			&i.ThreadCount,
			&i.HandleCount,
			&i.BasePriority,
			&i.CreateTime,
			&i.UserTime,
			&i.KernelTime,
			&i.WorkingSetSize,
			&i.PeakWorkingSetSize,
			&i.VirtualSize,
			&i.PeakVirtualSize,
			&i.PagefileUsage,
			&i.PeakPagefileUsage,
			&i.PageFaultCount,
			&i.ReadOperationCount,
			&i.WriteOperationCount,
			&i.OtherOperationCount,
			&i.ReadTransferCount,
			&i.WriteTransferCount,
			&i.OtherTransferCount,
			&i.CurrentProcessAddress,
			&i.NextProcessAddress,
			&i.PreviousProcessAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessInfosByUser = `-- name: GetProcessInfosByUser :many
SELECT id, user_id, process_id, parent_process_id, process_name, thread_count, handle_count,
    base_priority, create_time, user_time, kernel_time, working_set_size, peak_working_set_size,
    virtual_size, peak_virtual_size, pagefile_usage, peak_pagefile_usage, page_fault_count,
    read_operation_count, write_operation_count, other_operation_count, read_transfer_count,
    write_transfer_count, other_transfer_count, current_process_address, next_process_address,
    previous_process_address, created_at, updated_at
FROM process_info
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetProcessInfosByUser(ctx context.Context, userID int64) ([]ProcessInfo, error) {
	rows, err := q.db.Query(ctx, getProcessInfosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessInfo
	for rows.Next() {
		var i ProcessInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProcessID,
			&i.ParentProcessID,
			&i.ProcessName,
			&i.ThreadCount,
			&i.HandleCount,
			&i.BasePriority,
			&i.CreateTime,
			&i.UserTime,
			&i.KernelTime,
			&i.WorkingSetSize,
			&i.PeakWorkingSetSize,
			&i.VirtualSize,
			&i.PeakVirtualSize,
			&i.PagefileUsage,
			&i.PeakPagefileUsage,
			&i.PageFaultCount,
			&i.ReadOperationCount,
			&i.WriteOperationCount,
			&i.OtherOperationCount,
			&i.ReadTransferCount,
			&i.WriteTransferCount,
			&i.OtherTransferCount,
			&i.CurrentProcessAddress,
			&i.NextProcessAddress,
			&i.PreviousProcessAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password, created_at, updated_at FROM users
ORDER BY id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set name = $2,
  email = $3,
  password = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, password, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
